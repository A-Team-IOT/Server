#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('myapp:server');
var http = require('http');
var User = require('../schemas/user');
var Device = require('../schemas/device');



global.list = ["one","two"];


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

var io = require('socket.io')(server);

global.light = false;
io.on('connection', function(client) {
  console.log('Client connected...'  + client.id);
  
    client.on('toggleFromPage', function(state) {
      console.log('id: Clicked from page');
      client.broadcast.emit('light', state);    
      global.light = state;  
    });

    client.on('toggleFromBoard', function(state) {
      console.log('id: Button from board pushed');
      client.broadcast.emit('lightChanged', state);    
      global.light = state;  
    });

    client.on('dataFromDevice', function(data) {
      console.log('data from device: ' + JSON.stringify(data));
      io.sockets.emit('dataToTest', data);
      var data = JSON.parse(data);
      console.log(data.msg_type);

      //EXAMPLE
      //{"msg_type":"register", "email":"ryan@ryan.com", "password": "ryan", "id":"dev2", "components": [{"component_type":"button","name":"myButton","text": "click me", "method": "mymethod"},{"component_type":"button","name":"myButton2","text": "click me2", "method": "mymethod2"}]}
      if(data.msg_type == "register")
      {
        //Check all values exist and authenticate
        if (data.email && data.password && data.components && data.id) {
          User.authenticate(data.email, data.password, function(err, usr){
            if(err){
              console.log("Failed to authenticate user, device not registered");
            }
            else{
              User.update(
                { "email" : data.email}, 
                { "$addToSet": { "devices": data.id }}, 
                function(error) {
              });

              var deviceData = {
                id: data.id,
                owner_email: data.email,
                components: data.components
              }

              //use schema.create to insert device into the db
              Device.create(deviceData, function (err, user) {
                if (err) {
                  console.log("Error creating device: " + err);
                } else {
                  console.log("device registered");
                }
              });


            }
            
            
          });
        }
      }
      else if(data.msg_type == "event")
      {

      }
    });
  
  });





/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
